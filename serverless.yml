service: core
frameworkVersion: '3'

plugins:
  - serverless-webpack

useDotenv: true
dashboard:
  disableMonitoring: true
provider:
  name: aws
  runtime: nodejs18.x
  websocketsApiName: livechat-websockets-api
  websocketsApiRouteSelectionExpression: $request.body.action
  websocketsDescription: Live Chat Websocket Api
  httpApi:
      cors: true
      authorizers:
        userPoolAuthorizer:
          identitySource: $request.header.Authorization
          issuerUrl: 
            Fn::Join:
              - ''
              - - 'https://cognito-idp.'
                - Ref: AWS::Region
                - '.amazonaws.com/'
                - Ref: UserPool 
          audience:
            - Ref: UserPool 
          type: jwt
functions:
  login:
    role: CoreLambdaRole
    handler: lambdas.login
    environment:
      COGNITO_USER_POOL_ID: { Ref: UserPool }
      COGNITO_CLIENT_ID: { Ref: UserClient }
    events:
      - httpApi:
          path: /auth/login
          method: post
          authorizer:
  websocketAuthorizer:
    handler: lambdas.websocketAuthorizer
    environment:
      COGNITO_USER_POOL_ID: { Ref: UserPool }
      COGNITO_CLIENT_ID: { Ref: UserClient }
  connectionHandler:
      role: CoreLambdaRole
      handler: lambdas.connectionHandler
      events:
        - websocket:
            route: $connect
            authorizer:
              name: websocketAuthorizer
              identitySource:
                - 'route.request.querystring.token'
        - websocket:
            route: $disconnect
resources:
  Resources:
    CoreLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: CoreLambda-${opt:stage, 'dev'}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: CognitoAuthPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - cognito-idp:AdminInitiateAuth
                    - cognito-idp:AdminCreateUser
                    - cognito-idp:AdminSetUserPassword
                    - cognito-idp:AdminUpdateUserAttributes
                  Resource: "*"
          - PolicyName: Access
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: 
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                  Resource:
                    - "Fn::GetAtt": [UsersTable, "Arn"]
                    - { "Fn::Join": [ "/", [ 
                        { "Fn::GetAtt": [UsersTable, "Arn"] }, "index", "sortKeyIndex" 
                      ]]}
                - Effect: Allow
                  Action:
                    - execute-api:ManageConnections
                  Resource:
                    - ${self:custom.APIGatewayConnection}
    StoreTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: STORE_TABLE
        AttributeDefinitions:
          - AttributeName: storeId
            AttributeType: S
          - AttributeName: sortKey
            AttributeType: S
        KeySchema:
          - AttributeName: storeId
            KeyType: HASH
          - AttributeName: sortKey
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        GlobalSecondaryIndexes:
          - IndexName: sortKeyIndex
            KeySchema:
              - AttributeName: sortKey
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    UsersTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: USERS_TABLE
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: sortKey
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: sortKey
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        GlobalSecondaryIndexes:
          - IndexName: sortKeyIndex
            KeySchema:
              - AttributeName: sortKey
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: user-pool
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ["email"]
    AdminUserGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        GroupName: Admin
        UserPoolId: { Ref: UserPool }
    StoreOwnerUserGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        GroupName: StoreOwner
        UserPoolId: { Ref: UserPool }
    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "USER_PASSWORD_AUTH"

custom:
  APIGatewayConnection: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/@connections/*
  webpack:
    includeModules: true
    packager: yarn
package:
  exclude:
    - node_modules/dynamodb-localhost/**
    - node_modules/serverless-dynamodb-local/**
    - node_modules/serverless-offline/**
    - node_modules/@types/**
